rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    match /videos/{videoId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
          // Allow video owner to update all fields
          request.auth.uid == resource.data.authorId ||
          // Allow any authenticated user to update engagement and metadata fields
          request.resource.data.diff(resource.data).affectedKeys()
              .hasOnly(['likes', 'comments', 'primaryLanguage', 'languageConfidence', 'languageUpdatedAt', 'authorUsername', 'categories', 'difficulty'])
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }

    match /userLikes/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }

    match /userFollows/{followId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.followerId;
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.followerId;
    }

    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
          // Allow comment owner to update or delete
          request.auth.uid == resource.data.authorId ||
          // Allow any authenticated user to update likes
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])
      );
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.authorId;
    }

    match /commentLikes/{likeId} {
      allow read: if true;
      allow create, delete: if request.auth != null;
    }

    match /user_preferences/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /engagements/{engagementId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /conversations/{conversationId} {
      allow read: if request.auth != null && 
                 request.auth.uid in resource.data.participants;
      allow list: if request.auth != null;  // Allow querying, we'll filter in the query itself
      allow create: if request.auth != null && 
                   request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null && 
                   request.auth.uid in resource.data.participants &&
                   request.resource.data.participants == resource.data.participants;
    }

    match /messages/{messageId} {
      allow read: if request.auth != null && 
                 exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
                 request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.senderId &&
                   exists(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)) &&
                   request.auth.uid in get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.participants;
      allow update: if request.auth != null &&
                   request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt', 'readBy']);
    }
  }
} 