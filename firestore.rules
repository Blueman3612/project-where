rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId
        && request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['bio', 'username', 'profilePictureUrl']);
    }
    
    match /videos/{videoId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
          // Allow video owner to update these fields
          (request.auth.uid == resource.data.authorId 
            && request.resource.data.diff(resource.data).affectedKeys()
                .hasOnly(['thumbnailUrl', 'likes']))
          || 
          // Allow any authenticated user to update likes
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])
          ||
          // Allow any authenticated user to update authorUsername
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['authorUsername'])
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }

    match /userLikes/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }

    match /userFollows/{followId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.followerId;
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.followerId;
    }
  }
} 